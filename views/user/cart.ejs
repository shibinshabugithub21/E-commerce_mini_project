<%- include('header') %>


<style>
#removebtn{
  background-color: red;
  position: absolute;
  width: 80px;
  height: 30px;
  font-size: 15px;
  border: none;
  border-radius: 20px;
  left: 450px;
  
}
#plusmin button{
  height: 30px;
  padding-bottom: 10px;
}
/* Center the image */
img {
    display: block;
    margin-left: auto;
    margin-right: auto;
    width: 50%;
  }
  #empty-cart-btn {
  display: block;
  margin: 0 auto; /* Centers the button horizontally */
  width: 200px; /* Set the width of the button */
  height: 30px; /* Set the height of the button */
  font-size: 15px;
  border: none;
  border-radius: 20px; 
}
@media (max-width: 768px) {
    .cart-summary {
        position: fixed;
        bottom: 0;
        left: 0;
        width: 100%;
        z-index: 1000; /* Ensure it's above other content */
        background-color: white; /* Optional: Add a background color */
        border-top: 1px solid #ddd; /* Optional: Add a border */
    }

    .cart-summary .card {
        border: none; /* Remove card border */
        border-radius: 0; /* Remove card border radius */
        border-bottom: 1px solid #ddd; /* Optional: Add a border between items */
    }
}
</style>

<% if (cartItems.length == 0) { %>
  <img src="/img/empty-cart.png" >
  <button id="empty-cart-btn" class="btn btn-success btn-lg btn-block" onclick="window.location.href='/home'">Go Back to Home</button>

  <% } else{ %>

<section class="h-100 ">

  <div class="container py-5">
    <div class="row d-flex justify-content-center my-4">
      <div class="col-md-8">
        <div class="card mb-4">
          <div class="card-header py-3">
            <h5 class="mb-0">Cart - <%= cartItems.length %> items</h5>
          </div>
          <div class="card-body">
            <!-- Single item -->
            <% cartItems.forEach(cartItem => { %>
            <div class="row">
              <div class="col-lg-3 col-md-12 mb-4 mb-lg-0">
                
                
                <div class="bg-image hover-overlay hover-zoom ripple rounded" data-mdb-ripple-color="light">
                  <img src="/productImages/<%= cartItem.productname.Image[0] %>" class="w-100" />
                </div>
              </div>
              <div class="col-lg-5 col-md-6 mb-4 mb-lg-0">
                <!-- Data -->
                <p><strong><%=cartItem.productname.Productname %></strong></p>
                <p><strong>₹<%=cartItem.productname.OriginalPrice %></strong></p>
              </div>
              <button type="button" id="removebtn" class="remove-from-cart btn btn-danger" data-product-id="<%= cartItem.productname._id %>">Remove</button>

              <div class="col-lg-4 col-md-6 mb-4 mb-lg-0" id="plusmin">
                <!-- Quantity -->
                <div class="d-flex mb-4" style="max-width: 300px">
                  <button class="btn btn-primary px-3 me-2" onclick="updateQuantity('<%= cartItem.productname._id %>', 'decrement')">
                    <i class="fas fa-minus"></i>
                </button>

                <div class="form-outline">
                  <input id="quantity_<%= cartItem.productname._id %>" min="0" name="quantity" value="<%= cartItem.quantity %>" type="number" class="form-control" />
                  <label class="form-label" for="quantity_<%= cartItem.productname._id %>">Quantity</label>
              </div>

              <button class="btn btn-primary px-3 ms-2" onclick="updateQuantity('<%= cartItem.productname._id %>', 'increment')">
                <i class="fas fa-plus"></i>
            </button>
                </div>
                <!-- Quantity -->
              </div>
            </div>
            <hr class="my-4" />
            <% }); %>
          </div>
        </div>
        <div class="card mb-4">
          <div class="card-body">
            <p><strong>Expected shipping delivery</strong></p>
            <p class="mb-0">5 - 7 days</p>
          </div>
        </div>
      </div>
      <div class="col-md-4">
        <div class="card mb-4">
          <div class="card-header py-3">
            <h5 class="mb-0">Summary</h5>
          </div>
          <div class="card-body">
            <ul class="list-group list-group-flush">
              <li class="list-group-item d-flex justify-content-between align-items-center border-0 px-0 pb-0">
                Products
                <span>₹<%= grantTotal  %></span>
                
              </li>
              <li class="list-group-item d-flex justify-content-between align-items-center px-0">
                Shipping
                <span>Free</span>
              </li>
              <li class="list-group-item d-flex justify-content-between align-items-center border-0 px-0 mb-3">
                <div>
                  <strong>Total amount</strong>
                 
                </div>
                <span><strong id="Totalamount">₹<%= grantTotal %></strong></span>
              </li>
            </ul>

            <button type="button" class="btn btn-primary btn-lg btn-block">
              <a href="/CheckOutPage" style="text-decoration: none; color: white;">Go to checkout</a>
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>
<% } %>
<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
<script>
// Function to update quantity and send request to server
// async function updateQuantity(itemId, quantityChange) {
//     const quantityInput = document.getElementById(`quantity_${itemId}`);
//     const newQuantity = parseInt(quantityInput.value) + parseInt(quantityChange);
// console.log(newQuantity,"heloo");
//     if (newQuantity <= 0) {
//         // Handle removing the item from the cart if quantity becomes zero or negative
//         // You can implement your logic here or display a message to the user
//         return;
//     }
//     console.log(itemId);
//     try {
//         // Send a fetch request to update the quantity on the server
//         const response = await fetch(`/cartupdate/${itemId}`, {
//             method: 'post',
//             headers: {
//                 'Content-Type': 'application/json',
//             },
//             body: JSON.stringify({ quantity: newQuantity }),
//         });
//         if (!response.ok) {
//             throw new Error('Failed to update quantity');
//         }
//         // Refresh the page to reflect the updated cart
//         location.reload();
//     } catch (error) {
//         console.error('Error updating quantity:', error);
//         // Handle the error (e.g., show a message to the user)
//     }
// }

// async function updateQuantity(itemId, direction) {
//     const quantityInput = document.getElementById(`quantity_${itemId}`);
//     let newQuantity = parseInt(quantityInput.value);

//     // Increment or decrement the quantity based on the direction
//     if (direction === 'increment') {
//         newQuantity++;
//     } else if (direction === 'decrement' && newQuantity > 1) {
//         newQuantity--;
//     } else {
//         // Don't allow the quantity to go below 1
//         return;
//     }

//     try {
//         // Send a fetch request to update the quantity on the server
//         const response = await fetch(`/cartupdate/${itemId}`, {
//             method: 'post',
//             headers: {
//                 'Content-Type': 'application/json',
//             },
//             body: JSON.stringify({ quantity: newQuantity }),
//         });
//         if (!response.ok) {
//             throw new Error('Failed to update quantity');
//         }
//         // Parse the JSON response
//         const data = await response.json();
//         // Update the quantity and total price on the page
//         quantityInput.value = newQuantity;
//         const totalPriceElement = document.getElementById(`totalPrice_${itemId}`);
//         totalPriceElement.innerText = `₹${data.grantTotal}`;
        
//         // Check if the server response contains showAlert flag
//         if (data.showAlert) {
//             // Display a SweetAlert if showAlert is true
//             swal("Out of Stock", data.alertMessage, "warning");
//         }
//     } catch (error) {
//         console.error('Error updating quantity:', error);
//         // Handle the error (e.g., show a message to the user)
//     }
// }


async function updateQuantity(itemId, direction) {
    const quantityInput = document.getElementById(`quantity_${itemId}`);
    let newQuantity = parseInt(quantityInput.value);

    // Increment or decrement the quantity based on the direction
    if (direction === 'increment') {
        newQuantity++;
    } else if (direction === 'decrement' && newQuantity > 1) {
        newQuantity--;
    } else {
        // Don't allow the quantity to go below 1
        return;
    }

    try {
        // Send a fetch request to update the quantity on the server
        const response = await fetch(`/cartupdate/${itemId}`, {
            method: 'post',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ quantity: newQuantity }),
        });
        
        // Check if the response is okay
        if (response.ok) {
            console.log("Checked");
            // Parse the JSON response
            const data = await response.json();
            // Update the quantity and total price on the page
            quantityInput.value = newQuantity;
            console.log(data.grantTotal);
            const totalPriceElement = document.getElementById(`Totalamount`);
            totalPriceElement.innerHTML = `₹${data.grantTotal}`;
            
            // Check if the server response contains showAlert flag
            if (data.showAlert) {
                // Display a SweetAlert if showAlert is true
                Swal.fire({
                    title: 'Out of Stock',
                    text: data.alertMessage,
                    icon: 'warning',
                    confirmButtonText: 'OK'
                });
            }
        } else {
            // Display the existing alert
            Swal.fire({
                title: 'Error',
                text: 'Maximum Quantity Reached.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        }
    } catch (error) {
        console.error('Error updating quantity:', error);
        // Handle the error (e.g., show a message to the user)
    }
}



document.addEventListener('DOMContentLoaded', () => {
    const removeButtons = document.querySelectorAll('.remove-from-cart');
    removeButtons.forEach(button => {
        button.addEventListener('click', async () => {
            const itemId = button.getAttribute('data-product-id');
            // Display a SweetAlert2 confirmation dialog
            try {
                const { value: willDelete } = await Swal.fire({
                    title: "Are you sure?",
                    text: "Once removed, you will not be able to recover this item!",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Yes, remove it!'
                });
                if (willDelete) {
                    try {
                        // Send a fetch request to remove the item from the cart
                        const response = await fetch(`/cartDelete/${itemId}`, {
                            method: 'DELETE', // Assuming your backend expects POST requests for deletion
                        });
                        if (response.ok) {
                            // Display SweetAlert2 modal for successful removal
                            await Swal.fire({
                                title: 'Deleted!',
                                text: 'Your item has been removed from cart.',
                                icon: 'success'
                            });
                            // Refresh the page to reflect the updated cart
                            location.reload();
                        } else {
                            throw new Error('Failed to remove item from cart');
                        }
                    } catch (error) {
                        console.error('Error removing item from cart:', error);
                        // Handle the error (e.g., show a message to the user)
                        await Swal.fire({
                            title: 'Error',
                            text: 'Failed to remove item from cart',
                            icon: 'error'
                        });
                    }
                } else {
                    Swal.fire('Cancelled', 'Your item is safe :)', 'info');
                }
            } catch (error) {
                console.error('Error displaying confirmation dialog:', error);
                // Handle the error (e.g., show a message to the user)
                await Swal.fire({
                    title: 'Error',
                    text: 'Failed to display confirmation dialog',
                    icon: 'error'
                });
            }
        });
    });
});


</script>


<%- include("footer") %>
